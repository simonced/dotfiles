" vim: foldmethod=marker foldlevel=0

" Notes >>>
" easy way to get the same setup everywhere!
" ------------------------------------------
" let $CEDVIMRC = '~/path to git vim folder/vimrc'
" source $CEDVIMRC
" also add set rtp+=~/path to git vim folder
" No space around +=

" how to [swap] to a project:
" ---------------------------
"function! ProjectONE()
"	execute "cd ~/path/to/project"
"	call CedRoot()
"	execute "so Session.vim"
"endfunction
"nnoremap <leader>one :call ProjectONE()<CR>

" <<<
" Plugins  >>>
" might be necessary to source ~/.vim/autoload/plug.vim before my file
"source ~/.vim/autoload/plug.vim
if has('win32')
	call plug#begin('~/vimfiles/bundle')
else
	call plug#begin('~/.vim/bundle')
endif

" === editing ===
Plug 'sjl/gundo.vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'j5shi/ctrlp_bdelete.vim'
Plug 'mattn/emmet-vim'
if has('gui')
	Plug 'terryma/vim-smooth-scroll'
endif
Plug 'ervandew/supertab'
" but it's simply doing nothing
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-scriptease'
Plug 'tomtom/tcomment_vim'
Plug 'vim-scripts/IndentAnything'
"Plug 'gcmt/wildfire.vim'
Plug 'haya14busa/incsearch.vim'
"Plug 'vasconcelloslf/vim-interestingwords' " remaps n and I don't like that
" neovim doesn't support python yet apparently
if !has('nvim') && v:version>=704 && has('python')
	Plug 'SirVer/ultisnips'
	Plug 'valloric/MatchTagAlways'
endif
Plug 'vim-syntastic/syntastic'
" Syntax related
Plug 'jelera/vim-javascript-syntax'
" auto closes pairs
"Plug 'kana/vim-smartinput'
Plug 'hail2u/vim-css3-syntax'
Plug 'othree/html5.vim'
Plug 'ap/vim-css-color'
Plug 'evidens/vim-twig'
Plug 'othree/csscomplete.vim'
Plug 'mhinz/vim-sayonara'
Plug 'kshenoy/vim-signature'
Plug 'junegunn/vim-easy-align'
Plug 'captbaritone/better-indent-support-for-php-with-html'
" === DB related ===
if v:version>704
	Plug 'chrisbra/vim-diff-enhanced'
endif
"Plug 'dbext.vim'
" === Git related ===
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
" === Visual appeal ===
Plug 'itchyny/lightline.vim'
" === Clojure related ===
"Plug 'guns/vim-clojure-static'
"Plug 'tpope/vim-fireplace'
"Plug 'tpope/vim-leiningen'
" === DVPT and Misc ===
"Plug 'justinmk/vim-dirvish'
"Plug 'luochen1990/rainbow'
"Plug 'tpope/vim-vinegar'
Plug 'majutsushi/tagbar'
Plug 'scrooloose/nerdtree'
" === Some themes ===
Plug 'whatyouhide/vim-gotham'
"Plug 'chriskempson/base16-vim'
Plug 'sjl/badwolf'
"Plug 'zefei/cake16'
"Plug 'nice/sweater'
"Plug 'freeo/vim-kalisi'
"Plug 'alexjgriffin/sprinkles'
Plug 'romainl/Apprentice'
Plug 'ajh17/Spacegray.vim'
"Plug 'scwood/vim-hybrid'
"Plug 'morhetz/gruvbox'
"Plug 'jeetsukumaran/vim-nefertiti'
"Plug 'Lokaltog/vim-distinguished'
"Plug 'duythinht/inori'
"Plug 'wellsjo/wells-colorscheme.vim'
Plug 'Wutzara/vim-materialtheme'
"Plug 'raphamorim/lucario', {'rtp' : 'vim'}
"Plug 'chriskempson/vim-tomorrow-theme'
"Plug 'baskerville/bubblegum'
"Plug 'noahfrederick/vim-hemisu'
"Plug 'gilgigilgil/anderson.vim'
"Plug 'zeis/vim-kolor'
Plug 'joshdick/onedark.vim'
"Plug 'crusoexia/vim-monokai'
"Plug 'altercation/vim-colors-solarized'
"Plug 'lifepillar/vim-solarized8'
Plug 'NLKNguyen/papercolor-theme'
Plug 'vim-scripts/vydark'
Plug 'vim-scripts/vylight'
"Plug 'Marfisc/vorange'
Plug 'jacoborus/tender'
Plug 'alessandroyorba/sierra'
Plug 'alessandroyorba/alduin'
Plug 'fcpg/vim-fahrenheit'
Plug 'rakr/vim-two-firewatch'
Plug 'simonced/dracula-vim'
Plug 'tssm/fairyfloss.vim'
Plug 'cocopon/iceberg.vim'
Plug 'nanotech/jellybeans.vim'
" ===Colorscheme creation related===
Plug 'cocopon/pgmnt.vim'
" ===Dart lang related===
"Plug 'dart-lang/dart-vim-plugin'
" ===Haskell goodness===
"Plug 'dag/vim2hs'
" ===Elixir related===
Plug 'elixir-lang/vim-elixir'
call plug#end()
" <<< ======================================================================
" Basic VIM setup >>>
" file types
filetype on
filetype plugin on
filetype indent on

" syntax
syn on
syntax enable

" my variables
let $CEDROOT=getcwd()	" then can be changed with a shortcut, see below

" from HERE could be used on any machine as is
" ============================================
" we can use that anywhere I tested so let's go all in!
set t_Co=256
" No bells!
set noeb vb t_vb=
if has('gui_running')
	augroup bell
		au!
		autocmd GUIEnter * set vb t_vb=
	augroup END
endif

" important things first! files specs
set encoding=utf-8
augroup FilesParams
	au!
	autocmd BufWritePre * set fileformat=unix
augroup END
set fileformat=unix

" for japanese computers
set iminsert=0
set noimcmdline
set imsearch=-1
" setting up the undo features
"set undofile                " Save undo's after file closes
"set undodir=~/vimundo 	" where to save undo histories
"set undolevels=1000         " How many undos
"set undoreload=500        " number of lines to save for undo
" win specific...
if(has("windows"))
	" command has to be in the path, this command is from the package of cygwin
	set grepprg=grep\ -nHr\ --exclude-dir=smarty\ --exclude-dir=templates_c\ --exclude-dir=cache\ --exclude-dir=.svn\ --exclude-dir=.git
endif
set shm+=I	" no need of the short welcome message at startup
set path+=**	" we look for files in the current dirrectory and recursively by defaut
" no matchit for neovim (yet)
if !has('nvim')
	so $VIMRUNTIME/macros/matchit.vim
endif
" misc
set showcmd		" show partial commands
set modeline
" a little more space between lines, easier to the eyes
"set linespace=2
" wildness!
set wildmode=full
set wildmenu
set wildignore+=*/templates_c/*,*/cache/*,node_modules,_test*,*/smarty/*
set guioptions=a " a option is to link with clipboard of the system in visual selection
"set clipboard=unnamed	" default register linked with the system clipboard
"set mouse=a	" to use the mouse a little bit...
set undolevels=1000
set novisualbell
set guicursor=n-v-c:block-Cursor
set guicursor+=i-ci:ver30-Cursor-blinkwait300-blinkon200-blinkoff150
" programing related (also modified per filetype - see below)
set iskeyword+=_
set backspace=start,indent,eol
" completion
set complete-=i	" no included files
set showmatch
set matchtime=1
set tabstop=4
set shiftwidth=4
set shiftround
set smarttab
set autoindent
set nosmartindent
"set copyindent
" Space is my leader
let mapleader = " "
" hides unseaved buffers when switching
set hidden
" usefull when using change commands on text
"set cpoptions+=$
" folding options
set foldmarker=>>>,<<<
"set foldlevel=1
set viewoptions-=options
set nu rnu " line numbers in relative mode
" join formatoption so multi-bytes characters are joined 
" without space between then
set fo+=B

if v:version>704
	set shortmess+=c
endif

if v:version>704
	set belloff+=ctrlg " If Vim beeps during completion
	set signcolumn=yes
endif
" <<<
" directories >>>
"set dir=~/vimtmp//
set noswapfile
"set backupdir=~/vimbackup//
set nobackup
"set undodir=~/vimundo//
cd ~
" <<<
" highlight, searches, text >>>
set incsearch
set ic	" ignore case
set scs	" smart case search (case sensitive if a block letter is present in the search string)
set nowrapscan
" globa replace by default. adding /g at end of pattern to reverse effect
set gdefault
" no line wrap
set nowrap
" break words properly (but not cool for japanese...)
"set linebreak
" checking our lines length
"set colorcolumn=80
" activate hlsearch or not
nnoremap <leader><space> :set hls!<CR>:set hls?<CR>
" highlights identical lines after sorting the file
nnoremap <leader>hd :sort<CR>:set hls<CR>/^\(.*\)$\n\1
" highlight word under cursor
nnoremap * yiw:let @/="\\<".@"."\\>"<CR>:set hls<CR>
" seeing invisible characters, other tab candidate ›
" other eol candidate: ↲¶↓
" other nbsp and trail candidate:·
let s:list_setup="simple"
function! SwapListChars()
	if s:list_setup=="simple"
		set listchars=extends:›,tab:\ \ ,trail:·,nbsp:·
		let s:list_setup="full"
	else
		set listchars=extends:›,tab:›\ ,trail:·,nbsp:·,eol:↓
		let s:list_setup="simple"
	endif
endfunction
" init
call SwapListChars()
set list
nnoremap <leader>hw :call SwapListChars()<CR>
" Highlight Whitespaces
let &showbreak='› '		" line wrap indicator
" easy indenting visual-lines
vnoremap > >gv
vnoremap < <gv

" flash the cursor position on screen
function! LocateCursor()
	" center screen on the line
	"normal zz
	set cursorline cursorcolumn
	redraw
	sleep 100m
	set nocursorline nocursorcolumn
	redraw
	sleep 100m
	set cursorline cursorcolumn
	redraw
	sleep 100m
	set nocursorline nocursorcolumn
endfunction
" leader is important to not make an infinite loop!
nnoremap <leader>zz :silent call LocateCursor()<CR>
" center when searching
"nnoremap n nzz
"nnoremap N Nzz
" <<<
" Cursor >>>
" stop blinking
let &guicursor = substitute(&guicursor, 'n-v-c:', '&blinkon0-', '')
" <<<
" statusline and current line >>>
set laststatus=2
set noshowmode " will hide the infos like '-- INSERT --' and others
" I would like to keep my current line not so close to the edge
set scrolloff=5
set cursorline
nnoremap <leader>hl :setlocal cursorline!<CR>
" option to highlight the column as well
nnoremap <leader>hc :setlocal cursorcolumn!<CR>
" highlight both
nnoremap <leader>hx :set cursorline! cursorcolumn!<CR>
" <<<
" Autocommands >>>
augroup trail_match
	autocmd!
	" Matching trailing characters AND long lines
	autocmd BufRead * match Error /\s\+$/
	autocmd BufRead * match SpellBad /\%81v./
	autocmd BufRead * match SpellBad /　/
augroup END
" we reset the ime to 0 when leaving insert mode!
augroup reset_ime
	au!
	au InsertLeave * set iminsert=0
augroup END
" Highlight custom olds start to spot them when non folded!
augroup ced_foldstart
	autocmd!
	autocmd ColorScheme * highlight cedFoldStart guibg=#ff7272 guifg=black
	autocmd ColorScheme * highlight cedFoldEnd guibg=#ed9b68 guifg=black
	autocmd ColorScheme * highlight cedFoldPart guibg=#6e72f4 guifg=black
	autocmd BufRead * syntax match cedFoldStart /\v.*\>\>\>.*/
	autocmd BufRead * syntax match cedFoldEnd /\v.*\<\<\<.*/
	autocmd BufRead * syntax match cedFoldPart /\v.*\=\=\=$/
augroup END

if has('win32')
	" gui in windows is a bit clunky sometimes
	augroup redraw
		autocmd!
		autocmd InsertLeave * redraw!
	augroup END
endif

"augroup toggle_insert  " can be toggled normally with 'cor'
"    autocmd!
"    autocmd InsertEnter,BufLeave * :setlocal nocursorline
"    autocmd InsertLeave,BufEnter * :setlocal cursorline
"augroup END

"augroup ced_haskell
"	autocmd!
"    autocmd Filetype cabal :setlocal expandtab
"augroup END

" <<<
" shortcuts and keys >>>
" no arrow keys
no <up> <Nop>
no <down> <Nop>
no <left> <Nop>
no <right> <Nop>
" changing the default behavior of Y to act like the other modules
nnoremap Y y$
" saving
nnoremap <leader><CR> :w<CR>
nnoremap <c-s> :w<CR>
inoremap <c-s> <esc>:w<CR>
" escape alternative
inoremap fj <esc>
inoremap jf <esc>
" allowing to create a file with gf if missing
nnoremap gf :e <cfile><CR>
" changing the redo key
nnoremap <S-u> :redo<CR>
" refreshing my vimrc
nnoremap <leader>ee :so $MYVIMRC<CR>
" editing my rcfiles or tabedit, but recently I prefer opening in the same window...
nnoremap <leader>ev :tabedit $CEDVIMRC<CR>
" changing the local working directory (for the current window only)
nnoremap <leader>cd :lcd %:p:h<CR>
" exploring a hierarchy is needed sometimes
nnoremap <leader>e :Explore<CR>
" we can set the project root directory so it looks shorter in the b section
" of airline
function! CedRoot()
	if(has('win32'))
		let $CEDROOT=substitute(getcwd(), "\\\\", "\\\\\\\\", "g")
	else
		let $CEDROOT=getcwd()
	endif
endfunction
nnoremap <leader>cr :call CedRoot()<CR>
" refresh the syntax
nnoremap <F12> :syntax sync fromstart<CR>
" reformating HTML
nnoremap <leader>fh :set si<CR>:set ft=html<CR>:filetype indent on<CR>gg=G
" choosing a folding method
nnoremap <leader>fi :setlocal foldmethod=indent<CR>
nnoremap <leader>fm :setlocal foldmethod=marker<CR>
" I also want to move with hjkl in insert mode! but it is sometimes a bad
" idea... ie: C-k in insert mode is interesting sometimes
"inoremap <C-h> <left>
"inoremap <C-j> <down>
"inoremap <C-k> <up>
"inoremap <C-l> <right>
" movind through windows more easily
nnoremap <C-l> <C-w>l
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
" wrapping option
nnoremap <leader>w :set wrap!<CR>
" casual shortcut for save, let's try to forget that bad habbit, on some
" terminals, it simply don't work!
nnoremap <C-s> :w<CR>
inoremap <C-s> <esc>:w<CR>
" tabs and files related
nnoremap <leader>dhtp :cd ~/Dropbox/httpdocs<CR>
" easy closing : buffers and windows
nnoremap <leader>bb :Sayonara!<CR>
nnoremap <leader>ww :close<CR>
" normal horizontal split
nnoremap <C-n> :enew<CR>
" binding windows for scrolling
nnoremap <leader>sb :set scb!<CR>:set scb?<CR>
" usually after // 
nnoremap <leader>== 70a=<esc>
" executing one line of vimscript like in emacs for elips with C-x C-e
nnoremap <leader>xe yy:<C-r>"<BS><CR>
" resource a file easily
nnoremap <leader>so :so %<CR>
" centering and commenting a title in php/js code
nnoremap <leader>cc :center<CR>0i//<esc>
" we search for the text selected
vnoremap * y/\V<C-r>"<cr>N
" TODO find a way to get a past from system clipboard as well that doesn't
" interfere with native shortcuts
" x will delete characters so they are not stored in any register
nnoremap x "_x
" simply replace \ by / (used after auto-completing file names)
nnoremap <leader>f/ :s!\\!\/<CR>

" multiple cursors-like mappings
" found here:
" http://www.kevinli.co/posts/2017-01-19-multiple-cursors-in-500-bytes-of-vimscript/#full-source-code-for-copy-and-paste
let g:mc = "y/\\V\<C-r>=escape(@\", '/')\<CR>\<CR>"
nnoremap cn *``cgn
nnoremap cN *``cgN
vnoremap <expr> cn g:mc . "``cgn"
vnoremap <expr> cN g:mc . "``cgN"

"  <<<
" abbreviations, quite usefull >>>
iabbrev <expr> todayy strftime("%Y-%m-%d")	" we can insert also the current date!
iabbrev <expr> noww strftime("%H:%M:%S")	" we can insert also the current time!
iabbrev <expr> locationn expand('%:t')." @ l.".line('.')
iabbrev clog console.log();<left><left>
iabbrev redborder border: 1px solid red;
" <<<
" diff related  >>>
nnoremap <leader>dt :diffthis<CR>:set nocursorline<CR>: set norelativenumber<CR>
nnoremap <leader>do :diffoff<CR>:set nu rnu<CR>
nnoremap <leader>dg :diffget<CR>
nnoremap <leader>dp :diffput<CR>
nnoremap <leader>du :diffupdate<CR>
" <<<
" functions lookup/navigation related  >>>
" going to the end of the function where the opening brace is on the current
" line
nnoremap <leader>fe f{%
vnoremap <leader>fe f{%
" some functions in my plugin folder allow to look for functions nicely as well
" <<<
" plugins related >>>
" === CtrlP shortcuts ===
nnoremap <leader>mp :CtrlPMRUFiles<CR>
nnoremap <leader>wp :CtrlPCurWD<CR>
nnoremap <C-b> :CtrlPBuffer<CR>
let g:ctrlp_working_path_mode = 0
let g:ctrlp_open_new_file = 'r'

" === NERDtree shortcuts ===
"nnoremap <F10> :NERDTreeFind<CR>
nnoremap <F11> :NERDTreeToggle<CR>

" === Gundo related ==
nnoremap <F9> :GundoToggle<CR>

" === Emmet related ===
"let g:user_emmet_leader_key = '<C-,>'
" doesn't seem to work!

" === airline related ===
function! MyRoot()
	return  substitute(expand("%:p:h"), $CEDROOT, "", "")
endfunction
augroup AirlineMyRoot
	au!
	autocmd BufEnter,WinEnter * let g:airline_section_c = '%{MyRoot()} | %t %m'
augroup END
" format for trailing warnings
let g:airline_section_z = '%#__accent_bold#%l%#__restore__# / %L'
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#branch#enabled = 1

" Lightline related ==
let g:lightline = {
	\ 'colorscheme': 'powerline',
	\ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
	\		['fugitive'],
	\		['readonly', 'myroot'],
	\		['filename', 'modified', 'syntastic'] ],
	\ 	'right': [ [ 'lineinfo' ],
	\            [ 'fileformat', 'fileencoding', 'filetype' ] ]
	\ },
	\ 'inactive': {
	\	'left': [ ['relativepath'] ]
	\ },
	\ 'component': {
	\   'lineinfo': '%l/%L',
	\ },
	\ 'component_function': {
	\   'readonly': 'LightLineReadonly',
	\   'fugitive': 'LightLineFugitive',
	\   'syntastic': 'SyntasticStatuslineFlag',
	\	'myroot': 'MyRoot' }
	\ }
function! LightLineReadonly()
	return &readonly ? 'RO' : ''
endfunction
function! LightLineFugitive()
	if exists('*fugitive#head')
		let _ = fugitive#head()
		return strlen(_) ? _ : ''
	endif
	return ''
endfunction

" === mucomplete ===
"set completeopt+=menu,menuone

" === syntatic related === good tool to spot mistakes in code right away!
let g:syntastic_mode_map = { "mode" : "passive" } " active or passive
let g:syntastic_quiet_messages = { "type": "style" }
let g:syntastic_error_symbol = "x"
let g:syntastic_warning_symbol = "!"
let g:syntastic_auto_jump = 2
let g:syntastic_php_checkers = ['php']
let g:syntastic_js_checkers = ['jslint']

" === tagbar related ===
nnoremap <F8> :TagbarToggle<CR>
let g:tagbar_type_php  = {
    \ 'ctagstype' : 'php',
    \ 'kinds'     : [
        \ 'i:interfaces',
        \ 'c:classes',
        \ 'd:constant definitions',
        \ 'f:functions',
        \ 'j:javascript functions:1'
    \ ]
  \ }

" === autocommands ===
augroup MiscAutocmd
	au!
	autocmd QuickFixCmdPost *grep* cwindow
augroup END

" === random color scheme! ===
nnoremap <leader>cs :colo random<CR>:colo<CR>

" === smooth scroll ===
if has('gui')
	noremap <silent> <PageUp> :call smooth_scroll#up(&scroll, 10, 2)<CR>
	noremap <silent> <PageDown> :call smooth_scroll#down(&scroll, 10, 2)<CR>
endif

" === tcomment related ===
let g:tcommentOptions = {'whitespace': 'no'}

" === ultisnips related ===
"let g:UltiSnipsExpandTrigger="<space>"
"let g:UltiSnipsJumpForwardTrigger="<tab>"
"let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

"  === search related ===
" having very magic on by default
"nnoremap / /\v

"  === incsearch related ===
map <leader>/  <Plug>(incsearch-forward)
map <leader>?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" === interestingwords related ===
let g:interestingWordsGUIColors = ['#8CCBEA', '#A4E57E', '#FFDB72', '#FF7272', '#FFB3FF', '#9999FF']

" === gitgutter related ===
let g:gitgutter_diff_args = '-w'
let g:gitgutter_realtime = 0
"let g:gitgutter_async=0 " important for build 2180

" === QuickScope relater ===
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

" === peekaboo related ===
"let g:peekaboo_window = 'vertical botright 30new'

" === easy-align related ===
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" <<<
"" >>> experiments

"saving files by FTP with _netrc and netrw
let g:netrw_ignorenetrc = 0
" project specific settings are in local vimrc file, not to be shared.

" calls a shell command and pastes the result
"map <leader>tst :let @a = system("echo ".strftime("%Y"))<CR>"ap
" unserialize with PHP in command line from the system clipboard
nnoremap <leader>pu "*p:s/"/\\"/<CR>d$:r !php -r "print_r(unserialize('<C-r>"'));"<CR>
" we generate a ctags file for the current project
"nnoremap <leader>ct :!ctags -R --exclude=.svn --exclude=node_modules --exclude=_test --exclude=smarty --exclude="*.min.*" --langmap=php:.php.inc --tag-relative=yes --PHP-kinds=+cf-v<CR>
"-e for Emacs tags support
nnoremap <leader>ct :!ctags -R --exclude=.svn --exclude=node_modules --exclude=_test --exclude=smarty --exclude="*.min.*" --exclude=.git --langmap=php:.php.inc --PHP-kinds=+cf-v<CR>
" some ascii art text using [F]iglet with [B]ig style!
nnoremap <leader>fb ^d$:r !figlet <C-r>"<CR>
" <<<

